"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _TabColor = require("../assets/TabColor");

var _TabStyle = require("../assets/TabStyle");

var _Dot = _interopRequireDefault(require("./Dot"));

var _Triangle = _interopRequireDefault(require("./Triangle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const CleanTabBar = _ref => {
  let {
    state,
    descriptors,
    navigation,
    maxWidth = 600,
    height,
    darkMode = false,
    colorPalette = _TabColor.main_colors
  } = _ref;
  const BACKGROUND_COLOR = darkMode ? colorPalette.dark : colorPalette.light;
  const FOREGROUND_COLOR = darkMode ? colorPalette.light : colorPalette.dark;
  return /*#__PURE__*/_react.default.createElement(_reactNative.SafeAreaView, {
    style: [_TabStyle.CleanStyle.container, {
      backgroundColor: BACKGROUND_COLOR,
      height: height
    }]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_TabStyle.CleanStyle.content, {
      maxWidth: maxWidth
    }]
  }, state.routes.map((route, index) => {
    const focusAnimation = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
    const {
      options
    } = descriptors[route.key];
    const label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.label !== undefined ? options.label : options.title !== undefined ? options.title : route.name;
    const labelStyle = options.tabBarLabelStyle !== undefined ? options.tabBarLabelStyle : options.labelStyle !== undefined ? options.labelStyle : {};
    let color = options.tabBarActiveTintColor !== undefined ? options.tabBarActiveTintColor : options.color !== undefined ? options.color : colorPalette.primary;
    color = (color || '').charAt(0) == '#' ? color : colorPalette[color];
    const icon = options.tabBarIcon !== undefined ? options.tabBarIcon : options.icon !== undefined ? options.icon : null;

    const renderIcon = focused => {
      if (icon === undefined || icon === null) {
        return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
          style: { ..._TabStyle.CleanStyle.itemIconNotFound,
            borderColor: focused ? color : FOREGROUND_COLOR
          }
        });
      }

      return icon({
        focused,
        color: focused ? FOREGROUND_COLOR : FOREGROUND_COLOR,
        size: 23
      });
    };

    const isFocused = state.index === index;

    const onPress = () => {
      const event = navigation.emit({
        type: 'tabPress',
        target: route.key,
        canPreventDefault: true
      });

      if (!isFocused && !event.defaultPrevented) {
        navigation.navigate(route.name);
      }
    };

    const onLongPress = () => {
      navigation.emit({
        type: 'tabLongPress',
        target: route.key
      });
    };

    (0, _react.useEffect)(() => {
      if (isFocused) {
        onFocusedAnimation();
      } else {
        notFocusedAnimation();
      }
    }, [isFocused]);

    const onFocusedAnimation = () => {
      _reactNative.Animated.timing(focusAnimation, {
        toValue: 1,
        duration: 700,
        useNativeDriver: true,
        easing: _reactNative.Easing.bezier(0.33, 1, 0.68, 1)
      }).start();
    };

    const notFocusedAnimation = () => {
      _reactNative.Animated.timing(focusAnimation, {
        toValue: 0,
        duration: 700,
        useNativeDriver: true,
        easing: _reactNative.Easing.bezier(0.33, 1, 0.68, 1)
      }).start();
    };

    const translateYIcon = focusAnimation.interpolate({
      inputRange: [0, 1],
      outputRange: [0, -18]
    });
    const scaleIcon = focusAnimation.interpolate({
      inputRange: [0, 0.9, 1],
      outputRange: [1, 1, 0]
    });
    const translateYFilterIcon = focusAnimation.interpolate({
      inputRange: [0, 1],
      outputRange: [20, -35]
    });
    const translateYText = focusAnimation.interpolate({
      inputRange: [0, 1],
      outputRange: [40, 0]
    });
    const scaleText = focusAnimation.interpolate({
      inputRange: [0, 0.1, 1],
      outputRange: [0, 1, 1]
    });
    const scaleDot = focusAnimation.interpolate({
      inputRange: [0, 1],
      outputRange: [0, 1]
    });
    return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      key: index,
      style: _TabStyle.CleanStyle.item
    }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
      accessibilityRole: "button",
      accessibilityState: isFocused ? {
        selected: true
      } : {},
      accessibilityLabel: options.tabBarAccessibilityLabel,
      testID: options.tabBarTestID,
      onPress: onPress,
      onLongPress: onLongPress,
      style: _TabStyle.CleanStyle.touchableItem
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_TabStyle.CleanStyle.itemIconLayer, {
        transform: [{
          translateY: translateYIcon
        }, {
          scale: scaleIcon
        }]
      }]
    }, renderIcon(isFocused)), /*#__PURE__*/_react.default.createElement(_Triangle.default, {
      color: BACKGROUND_COLOR,
      style: _TabStyle.CleanStyle.filterIcon,
      translateY: translateYFilterIcon
    }), /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      pointerEvents: "none",
      style: [_TabStyle.CleanStyle.itemTextLayer, {
        transform: [{
          translateY: translateYText
        }, {
          scale: scaleText
        }]
      }]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      numberOfLines: 1,
      style: [_TabStyle.CleanStyle.itemText, labelStyle, {
        color: color
      }]
    }, label)), /*#__PURE__*/_react.default.createElement(_Triangle.default, {
      color: BACKGROUND_COLOR,
      style: _TabStyle.CleanStyle.filterText,
      translateY: -5
    }), /*#__PURE__*/_react.default.createElement(_Dot.default, {
      color: color,
      scale: scaleDot
    })));
  })));
};

var _default = CleanTabBar;
exports.default = _default;
//# sourceMappingURL=CleanTabBar.js.map