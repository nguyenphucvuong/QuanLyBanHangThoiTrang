{"version":3,"sources":["CleanTabBar.tsx"],"names":["React","useEffect","useRef","View","Text","Animated","TouchableOpacity","Easing","SafeAreaView","main_colors","CleanStyle","Dot","Triangle","CleanTabBar","state","descriptors","navigation","maxWidth","height","darkMode","colorPalette","BACKGROUND_COLOR","dark","light","FOREGROUND_COLOR","container","backgroundColor","content","routes","map","route","index","focusAnimation","Value","current","options","key","label","tabBarLabel","undefined","title","name","labelStyle","tabBarLabelStyle","color","tabBarActiveTintColor","primary","charAt","icon","tabBarIcon","renderIcon","focused","itemIconNotFound","borderColor","size","isFocused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","navigate","onLongPress","onFocusedAnimation","notFocusedAnimation","timing","toValue","duration","useNativeDriver","easing","bezier","start","translateYIcon","interpolate","inputRange","outputRange","scaleIcon","translateYFilterIcon","translateYText","scaleText","scaleDot","item","selected","tabBarAccessibilityLabel","tabBarTestID","touchableItem","itemIconLayer","transform","translateY","scale","filterIcon","itemTextLayer","itemText","filterText"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  View,\n  Text,\n  Animated,\n  TouchableOpacity,\n  Easing,\n  SafeAreaView,\n} from 'react-native';\nimport { main_colors } from '../assets/TabColor';\nimport { CleanStyle } from '../assets/TabStyle';\nimport Dot from './Dot';\nimport Triangle from './Triangle';\nimport type { CleanTabBarConfig } from './types';\n\nconst CleanTabBar = ({\n  state,\n  descriptors,\n  navigation,\n  maxWidth = 600,\n  height,\n  darkMode = false,\n  colorPalette = main_colors,\n}: CleanTabBarConfig) => {\n  const BACKGROUND_COLOR = darkMode ? colorPalette.dark : colorPalette.light;\n  const FOREGROUND_COLOR = darkMode ? colorPalette.light : colorPalette.dark;\n\n  return (\n    <SafeAreaView\n      style={[\n        CleanStyle.container,\n        {\n          backgroundColor: BACKGROUND_COLOR,\n          height: height,\n        },\n      ]}\n    >\n      <View\n        style={[\n          CleanStyle.content,\n          {\n            maxWidth: maxWidth,\n          },\n        ]}\n      >\n        {state.routes.map((route, index) => {\n          const focusAnimation = useRef(new Animated.Value(0)).current;\n\n          const { options } = descriptors[route.key];\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.label !== undefined\n              ? options.label\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n          const labelStyle =\n            options.tabBarLabelStyle !== undefined\n              ? options.tabBarLabelStyle\n              : options.labelStyle !== undefined\n              ? options.labelStyle\n              : {};\n\n          let color =\n            options.tabBarActiveTintColor !== undefined\n              ? options.tabBarActiveTintColor\n              : options.color !== undefined\n              ? options.color\n              : colorPalette.primary;\n          color = (color || '').charAt(0) == '#' ? color : colorPalette[color];\n\n          const icon =\n            options.tabBarIcon !== undefined\n              ? options.tabBarIcon\n              : options.icon !== undefined\n              ? options.icon\n              : null;\n\n          const renderIcon = (focused: boolean) => {\n            if (icon === undefined || icon === null) {\n              return (\n                <View\n                  style={{\n                    ...CleanStyle.itemIconNotFound,\n                    borderColor: focused ? color : FOREGROUND_COLOR,\n                  }}\n                />\n              );\n            }\n\n            return icon({\n              focused,\n              color: focused ? FOREGROUND_COLOR : FOREGROUND_COLOR,\n              size: 23,\n            });\n          };\n\n          const isFocused = state.index === index;\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!isFocused && !event.defaultPrevented) {\n              navigation.navigate(route.name);\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          useEffect(() => {\n            if (isFocused) {\n              onFocusedAnimation();\n            } else {\n              notFocusedAnimation();\n            }\n          }, [isFocused]);\n\n          const onFocusedAnimation = () => {\n            Animated.timing(focusAnimation, {\n              toValue: 1,\n              duration: 700,\n              useNativeDriver: true,\n              easing: Easing.bezier(0.33, 1, 0.68, 1),\n            }).start();\n          };\n\n          const notFocusedAnimation = () => {\n            Animated.timing(focusAnimation, {\n              toValue: 0,\n              duration: 700,\n              useNativeDriver: true,\n              easing: Easing.bezier(0.33, 1, 0.68, 1),\n            }).start();\n          };\n\n          const translateYIcon = focusAnimation.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, -18],\n          });\n          const scaleIcon = focusAnimation.interpolate({\n            inputRange: [0, 0.9, 1],\n            outputRange: [1, 1, 0],\n          });\n          const translateYFilterIcon = focusAnimation.interpolate({\n            inputRange: [0, 1],\n            outputRange: [20, -35],\n          });\n          const translateYText = focusAnimation.interpolate({\n            inputRange: [0, 1],\n            outputRange: [40, 0],\n          });\n          const scaleText = focusAnimation.interpolate({\n            inputRange: [0, 0.1, 1],\n            outputRange: [0, 1, 1],\n          });\n          const scaleDot = focusAnimation.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, 1],\n          });\n\n          return (\n            <Animated.View key={index} style={CleanStyle.item}>\n              <TouchableOpacity\n                accessibilityRole=\"button\"\n                accessibilityState={isFocused ? { selected: true } : {}}\n                accessibilityLabel={options.tabBarAccessibilityLabel}\n                testID={options.tabBarTestID}\n                onPress={onPress}\n                onLongPress={onLongPress}\n                style={CleanStyle.touchableItem}\n              >\n                <Animated.View\n                  style={[\n                    CleanStyle.itemIconLayer,\n                    {\n                      transform: [\n                        { translateY: translateYIcon },\n                        { scale: scaleIcon },\n                      ],\n                    },\n                  ]}\n                >\n                  {renderIcon(isFocused)}\n                </Animated.View>\n                <Triangle\n                  color={BACKGROUND_COLOR}\n                  style={CleanStyle.filterIcon}\n                  translateY={translateYFilterIcon}\n                />\n\n                <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                    CleanStyle.itemTextLayer,\n                    {\n                      transform: [\n                        { translateY: translateYText },\n                        { scale: scaleText },\n                      ],\n                    },\n                  ]}\n                >\n                  <Text\n                    numberOfLines={1}\n                    style={[\n                      CleanStyle.itemText,\n                      labelStyle,\n                      {\n                        color: color,\n                      },\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                </Animated.View>\n                <Triangle\n                  color={BACKGROUND_COLOR}\n                  style={CleanStyle.filterText}\n                  translateY={-5}\n                />\n\n                <Dot color={color} scale={scaleDot} />\n              </TouchableOpacity>\n            </Animated.View>\n          );\n        })}\n      </View>\n    </SafeAreaView>\n  );\n};\n\nexport default CleanTabBar;\n"]}