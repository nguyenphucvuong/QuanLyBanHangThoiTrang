{"version":3,"sources":["ColorfulTabBar.tsx"],"names":["React","useEffect","useRef","useState","View","Text","Animated","TouchableOpacity","Easing","SafeAreaView","main_colors","ColorfulStyle","hexToRGB","ColorfulTabBar","state","descriptors","navigation","maxWidth","height","darkMode","colorPalette","BACKGROUND_COLOR","dark","light","FOREGROUND_COLOR","ITEM_TOTAL","routes","length","container","backgroundColor","content","map","route","index","focusAnimation","Value","current","width_text","setWidthText","width_icon","setWidthIcon","options","key","label","tabBarLabel","undefined","title","name","labelStyle","tabBarLabelStyle","color","tabBarActiveTintColor","primary","charAt","rgb_color","icon","tabBarIcon","renderIcon","focused","itemIconNotFound","borderColor","size","isFocused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","navigate","onLongPress","onFocusedAnimation","notFocusedAnimation","timing","toValue","duration","useNativeDriver","easing","bezier","start","flexItem","interpolate","inputRange","outputRange","filterColor","HALF_ICON_WIDTH","TEXT_ICON_WIDTH","translateXIcon","translateXText","opacityText","item","flex","selected","tabBarAccessibilityLabel","tabBarTestID","touchableItem","position","transform","translateX","e","width","nativeEvent","layout","opacity","itemText"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SACEC,IADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,gBAJF,EAKEC,MALF,EAMEC,YANF,QAQO,cARP;AASA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAGA,MAAMC,cAAc,GAAG,QAQK;AAAA,MARJ;AACtBC,IAAAA,KADsB;AAEtBC,IAAAA,WAFsB;AAGtBC,IAAAA,UAHsB;AAItBC,IAAAA,QAJsB;AAKtBC,IAAAA,MALsB;AAMtBC,IAAAA,QAAQ,GAAG,KANW;AAOtBC,IAAAA,YAAY,GAAGV;AAPO,GAQI;AAC1B,QAAMW,gBAAgB,GAAGF,QAAQ,GAAGC,YAAY,CAACE,IAAhB,GAAuBF,YAAY,CAACG,KAArE;AACA,QAAMC,gBAAgB,GAAGL,QAAQ,GAAGC,YAAY,CAACG,KAAhB,GAAwBH,YAAY,CAACE,IAAtE;AACA,QAAMG,UAAU,GAAGX,KAAK,CAACY,MAAN,CAAaC,MAAhC;AAEA,sBACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAE,CACLhB,aAAa,CAACiB,SADT,EAEL;AACEC,MAAAA,eAAe,EAAER,gBADnB;AAEEH,MAAAA,MAAM,EAAEA;AAFV,KAFK;AADT,kBASE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLP,aAAa,CAACmB,OADT,EAEL;AACEb,MAAAA,QAAQ,EAAEA,QAAQ,GACdA,QADc,GAEdQ,UAAU,IAAI,CAAd,GACA,GADA,GAEA,MAAMA;AALZ,KAFK;AADT,KAYGX,KAAK,CAACY,MAAN,CAAaK,GAAb,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,UAAMC,cAAc,GAAGhC,MAAM,CAAC,IAAII,QAAQ,CAAC6B,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAArD;AACA,UAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BnC,QAAQ,CAAC,CAAD,CAA3C;AACA,UAAM,CAACoC,UAAD,EAAaC,YAAb,IAA6BrC,QAAQ,CAAC,CAAD,CAA3C;AAEA,UAAM;AAAEsC,MAAAA;AAAF,QAAc1B,WAAW,CAACiB,KAAK,CAACU,GAAP,CAA/B;AACA,UAAMC,KAAK,GACTF,OAAO,CAACG,WAAR,KAAwBC,SAAxB,GACIJ,OAAO,CAACG,WADZ,GAEIH,OAAO,CAACE,KAAR,KAAkBE,SAAlB,GACAJ,OAAO,CAACE,KADR,GAEAF,OAAO,CAACK,KAAR,KAAkBD,SAAlB,GACAJ,OAAO,CAACK,KADR,GAEAd,KAAK,CAACe,IAPZ;AAQA,UAAMC,UAAU,GACdP,OAAO,CAACQ,gBAAR,KAA6BJ,SAA7B,GACIJ,OAAO,CAACQ,gBADZ,GAEIR,OAAO,CAACO,UAAR,KAAuBH,SAAvB,GACAJ,OAAO,CAACO,UADR,GAEA,EALN;AAOA,QAAIE,KAAK,GACPT,OAAO,CAACU,qBAAR,KAAkCN,SAAlC,GACIJ,OAAO,CAACU,qBADZ,GAEIV,OAAO,CAACS,KAAR,KAAkBL,SAAlB,GACAJ,OAAO,CAACS,KADR,GAEA9B,YAAY,CAACgC,OALnB;AAOAF,IAAAA,KAAK,GAAG,CAACA,KAAK,IAAI,EAAV,EAAcG,MAAd,CAAqB,CAArB,KAA2B,GAA3B,GAAiCH,KAAjC,GAAyC9B,YAAY,CAAC8B,KAAD,CAA7D;AACA,UAAMI,SAAS,GAAG1C,QAAQ,CAACsC,KAAD,CAA1B;AAEA,UAAMK,IAAI,GACRd,OAAO,CAACe,UAAR,KAAuBX,SAAvB,GACIJ,OAAO,CAACe,UADZ,GAEIf,OAAO,CAACc,IAAR,KAAiBV,SAAjB,GACAJ,OAAO,CAACc,IADR,GAEA,IALN;;AAOA,UAAME,UAAU,GAAIC,OAAD,IAAsB;AACvC,UAAIH,IAAI,KAAKV,SAAT,IAAsBU,IAAI,KAAK,IAAnC,EAAyC;AACvC,4BACE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE,EACL,GAAG5C,aAAa,CAACgD,gBADZ;AAELC,YAAAA,WAAW,EAAEF,OAAO,GAAGR,KAAH,GAAW1B;AAF1B;AADT,UADF;AAQD;;AAED,aAAO+B,IAAI,CAAC;AACVG,QAAAA,OADU;AAEVR,QAAAA,KAAK,EAAEQ,OAAO,GACVvC,QAAQ,GACNK,gBADM,GAEN0B,KAHQ,GAIV1B,gBANM;AAOVqC,QAAAA,IAAI,EAAE;AAPI,OAAD,CAAX;AASD,KArBD;;AAuBA,UAAMC,SAAS,GAAGhD,KAAK,CAACmB,KAAN,KAAgBA,KAAlC;;AAEA,UAAM8B,OAAO,GAAG,MAAM;AACpB,YAAMC,KAAK,GAAGhD,UAAU,CAACiD,IAAX,CAAgB;AAC5BC,QAAAA,IAAI,EAAE,UADsB;AAE5BC,QAAAA,MAAM,EAAEnC,KAAK,CAACU,GAFc;AAG5B0B,QAAAA,iBAAiB,EAAE;AAHS,OAAhB,CAAd;;AAMA,UAAI,CAACN,SAAD,IAAc,CAACE,KAAK,CAACK,gBAAzB,EAA2C;AACzCrD,QAAAA,UAAU,CAACsD,QAAX,CAAoBtC,KAAK,CAACe,IAA1B;AACD;AACF,KAVD;;AAYA,UAAMwB,WAAW,GAAG,MAAM;AACxBvD,MAAAA,UAAU,CAACiD,IAAX,CAAgB;AACdC,QAAAA,IAAI,EAAE,cADQ;AAEdC,QAAAA,MAAM,EAAEnC,KAAK,CAACU;AAFA,OAAhB;AAID,KALD;;AAOAzC,IAAAA,SAAS,CAAC,MAAM;AACd,UAAI6D,SAAJ,EAAe;AACbU,QAAAA,kBAAkB;AACnB,OAFD,MAEO;AACLC,QAAAA,mBAAmB;AACpB;AACF,KANQ,EAMN,CAACX,SAAD,CANM,CAAT;;AAQA,UAAMU,kBAAkB,GAAG,MAAM;AAC/BlE,MAAAA,QAAQ,CAACoE,MAAT,CAAgBxC,cAAhB,EAAgC;AAC9ByC,QAAAA,OAAO,EAAE,CADqB;AAE9BC,QAAAA,QAAQ,EAAE,GAFoB;AAG9BC,QAAAA,eAAe,EAAE,KAHa;AAI9BC,QAAAA,MAAM,EAAEtE,MAAM,CAACuE,MAAP,CAAc,IAAd,EAAoB,CAApB,EAAuB,IAAvB,EAA6B,CAA7B;AAJsB,OAAhC,EAKGC,KALH;AAMD,KAPD;;AASA,UAAMP,mBAAmB,GAAG,MAAM;AAChCnE,MAAAA,QAAQ,CAACoE,MAAT,CAAgBxC,cAAhB,EAAgC;AAC9ByC,QAAAA,OAAO,EAAE,CADqB;AAE9BC,QAAAA,QAAQ,EAAE,GAFoB;AAG9BC,QAAAA,eAAe,EAAE,KAHa;AAI9BC,QAAAA,MAAM,EAAEtE,MAAM,CAACuE,MAAP,CAAc,IAAd,EAAoB,CAApB,EAAuB,IAAvB,EAA6B,CAA7B;AAJsB,OAAhC,EAKGC,KALH;AAMD,KAPD;;AASA,UAAMC,QAAQ,GAAG/C,cAAc,CAACgD,WAAf,CAA2B;AAC1CC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD8B;AAE1CC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAF6B,KAA3B,CAAjB;AAIA,UAAMC,WAAW,GAAGnD,cAAc,CAACgD,WAAf,CAA2B;AAC7CC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADiC;AAE7CC,MAAAA,WAAW,EAAE,CACV,QAAO9B,SAAS,CAAC,CAAD,CAAI,KAAIA,SAAS,CAAC,CAAD,CAAI,KAAIA,SAAS,CAAC,CAAD,CAAI,MAD5C,EAEV,QAAOA,SAAS,CAAC,CAAD,CAAI,KAAIA,SAAS,CAAC,CAAD,CAAI,KAAIA,SAAS,CAAC,CAAD,CAAI,KACrDnC,QAAQ,GAAG,GAAH,GAAS,IAClB,GAJU;AAFgC,KAA3B,CAApB;AAUA,UAAMmE,eAAe,GAAG/C,UAAU,GAAC,CAAnC;AACA,UAAMgD,eAAe,GAAGlD,UAAU,GAACiD,eAAnC;AAEA,UAAME,cAAc,GAAGtD,cAAc,CAACgD,WAAf,CAA2B;AAChDC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAEG,eAAF,GAAmB,CAAvB;AAFmC,KAA3B,CAAvB;AAIA,UAAME,cAAc,GAAGvD,cAAc,CAACgD,WAAf,CAA2B;AAChDC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAKE,eAAD,GAAkB,CAAtB;AAFmC,KAA3B,CAAvB;AAIA,UAAMI,WAAW,GAAGxD,cAAc,CAACgD,WAAf,CAA2B;AAC7CC,MAAAA,UAAU,EAAE,CAAC,GAAD,EAAM,CAAN,CADiC;AAE7CC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFgC,KAA3B,CAApB;AAKA,wBACE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,GAAG,EAAEnD,KADP;AAEE,MAAA,KAAK,EAAE,CACLtB,aAAa,CAACgF,IADT,EAEL;AACEC,QAAAA,IAAI,EAAEX;AADR,OAFK;AAFT,oBASE,oBAAC,gBAAD;AACE,MAAA,iBAAiB,EAAC,QADpB;AAEE,MAAA,kBAAkB,EAAEnB,SAAS,GAAG;AAAE+B,QAAAA,QAAQ,EAAE;AAAZ,OAAH,GAAwB,EAFvD;AAGE,MAAA,kBAAkB,EAAEpD,OAAO,CAACqD,wBAH9B;AAIE,MAAA,MAAM,EAAErD,OAAO,CAACsD,YAJlB;AAKE,MAAA,OAAO,EAAEhC,OALX;AAME,MAAA,WAAW,EAAEQ,WANf;AAOE,MAAA,KAAK,EAAE5D,aAAa,CAACqF;AAPvB,oBASE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,KAAK,EAAE,CACLrF,aAAa,CAAC0E,WADT,EAEL;AACExD,QAAAA,eAAe,EAAEwD;AADnB,OAFK;AADT,oBAQE,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,KAAK,EAAE;AAClBY,QAAAA,QAAQ,EAAE,UADQ;AAElBC,QAAAA,SAAS,EAAE,CACT;AAACC,UAAAA,UAAU,EAAEX;AAAb,SADS;AAFO,OAAtB;AAMA,MAAA,QAAQ,EAAGY,CAAD,IAA0B;AAClC,cAAM;AAACC,UAAAA;AAAD,YAAUD,CAAC,CAACE,WAAF,CAAcC,MAA9B;AACA/D,QAAAA,YAAY,CAAC6D,KAAD,CAAZ;AACD;AATD,OAUG5C,UAAU,CAACK,SAAD,CAVb,CARF,eAqBE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,KAAK,EAAE;AACLmC,QAAAA,QAAQ,EAAE,UADL;AAELO,QAAAA,OAAO,EAAEd,WAFJ;AAGLQ,QAAAA,SAAS,EAAE,CACT;AAACC,UAAAA,UAAU,EAAEV;AAAb,SADS;AAHN,OADT;AAQE,MAAA,QAAQ,EAAGW,CAAD,IAA0B;AAClC,cAAM;AAACC,UAAAA;AAAD,YAAUD,CAAC,CAACE,WAAF,CAAcC,MAA9B;AACAjE,QAAAA,YAAY,CAAC+D,KAAD,CAAZ;AACD;AAXH,oBAaE,oBAAC,IAAD;AACE,MAAA,aAAa,EAAE,CADjB;AAEE,MAAA,KAAK,EAAE,CACL1F,aAAa,CAAC8F,QADT,EAEL;AACEvD,QAAAA,KAAK,EAAE/B,QAAQ,GAAGK,gBAAH,GAAsB0B;AADvC,OAFK,EAKLF,UALK;AAFT,OAUGL,KAVH,CAbF,CArBF,CATF,CATF,CADF;AAsED,GAhNA,CAZH,CATF,CADF;AA0OD,CAvPD;;AAyPA,eAAe9B,cAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  Animated,\r\n  TouchableOpacity,\r\n  Easing,\r\n  SafeAreaView,\r\n  LayoutChangeEvent,\r\n} from 'react-native';\r\nimport { main_colors } from '../assets/TabColor';\r\nimport { ColorfulStyle } from '../assets/TabStyle';\r\nimport { hexToRGB } from '../utils/Converter';\r\nimport type { ColorfulTabBarConfig } from './types';\r\n\r\nconst ColorfulTabBar = ({\r\n  state,\r\n  descriptors,\r\n  navigation,\r\n  maxWidth,\r\n  height,\r\n  darkMode = false,\r\n  colorPalette = main_colors,\r\n}: ColorfulTabBarConfig) => {\r\n  const BACKGROUND_COLOR = darkMode ? colorPalette.dark : colorPalette.light;\r\n  const FOREGROUND_COLOR = darkMode ? colorPalette.light : colorPalette.dark;\r\n  const ITEM_TOTAL = state.routes.length;\r\n\r\n  return (\r\n    <SafeAreaView\r\n      style={[\r\n        ColorfulStyle.container,\r\n        {\r\n          backgroundColor: BACKGROUND_COLOR,\r\n          height: height,\r\n        },\r\n      ]}\r\n    >\r\n      <View\r\n        style={[\r\n          ColorfulStyle.content,\r\n          {\r\n            maxWidth: maxWidth\r\n              ? maxWidth\r\n              : ITEM_TOTAL == 1\r\n              ? 150\r\n              : 100 * ITEM_TOTAL,\r\n          },\r\n        ]}\r\n      >\r\n        {state.routes.map((route, index) => {\r\n          const focusAnimation = useRef(new Animated.Value(0)).current;\r\n          const [width_text, setWidthText] = useState(0)\r\n          const [width_icon, setWidthIcon] = useState(0)\r\n\r\n          const { options } = descriptors[route.key];\r\n          const label =\r\n            options.tabBarLabel !== undefined\r\n              ? options.tabBarLabel\r\n              : options.label !== undefined\r\n              ? options.label\r\n              : options.title !== undefined\r\n              ? options.title\r\n              : route.name;\r\n          const labelStyle =\r\n            options.tabBarLabelStyle !== undefined\r\n              ? options.tabBarLabelStyle\r\n              : options.labelStyle !== undefined\r\n              ? options.labelStyle\r\n              : {};\r\n\r\n          let color =\r\n            options.tabBarActiveTintColor !== undefined\r\n              ? options.tabBarActiveTintColor\r\n              : options.color !== undefined\r\n              ? options.color\r\n              : colorPalette.primary;\r\n\r\n          color = (color || '').charAt(0) == '#' ? color : colorPalette[color];\r\n          const rgb_color = hexToRGB(color);\r\n\r\n          const icon =\r\n            options.tabBarIcon !== undefined\r\n              ? options.tabBarIcon\r\n              : options.icon !== undefined\r\n              ? options.icon\r\n              : null;\r\n\r\n          const renderIcon = (focused: boolean) => {\r\n            if (icon === undefined || icon === null) {\r\n              return (\r\n                <View\r\n                  style={{\r\n                    ...ColorfulStyle.itemIconNotFound,\r\n                    borderColor: focused ? color : FOREGROUND_COLOR,\r\n                  }}\r\n                />\r\n              );\r\n            }\r\n\r\n            return icon({\r\n              focused,\r\n              color: focused\r\n                ? darkMode\r\n                  ? FOREGROUND_COLOR\r\n                  : color\r\n                : FOREGROUND_COLOR,\r\n              size: 23,\r\n            });\r\n          };\r\n\r\n          const isFocused = state.index === index;\r\n\r\n          const onPress = () => {\r\n            const event = navigation.emit({\r\n              type: 'tabPress',\r\n              target: route.key,\r\n              canPreventDefault: true,\r\n            });\r\n\r\n            if (!isFocused && !event.defaultPrevented) {\r\n              navigation.navigate(route.name);\r\n            }\r\n          };\r\n\r\n          const onLongPress = () => {\r\n            navigation.emit({\r\n              type: 'tabLongPress',\r\n              target: route.key,\r\n            });\r\n          };\r\n\r\n          useEffect(() => {\r\n            if (isFocused) {\r\n              onFocusedAnimation();\r\n            } else {\r\n              notFocusedAnimation();\r\n            }\r\n          }, [isFocused]);\r\n\r\n          const onFocusedAnimation = () => {\r\n            Animated.timing(focusAnimation, {\r\n              toValue: 1,\r\n              duration: 500,\r\n              useNativeDriver: false,\r\n              easing: Easing.bezier(0.33, 1, 0.68, 1),\r\n            }).start();\r\n          };\r\n\r\n          const notFocusedAnimation = () => {\r\n            Animated.timing(focusAnimation, {\r\n              toValue: 0,\r\n              duration: 500,\r\n              useNativeDriver: false,\r\n              easing: Easing.bezier(0.33, 1, 0.68, 1),\r\n            }).start();\r\n          };\r\n\r\n          const flexItem = focusAnimation.interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [1, 2],\r\n          });\r\n          const filterColor = focusAnimation.interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [\r\n              `rgba(${rgb_color[0]}, ${rgb_color[1]}, ${rgb_color[2]}, 0)`,\r\n              `rgba(${rgb_color[0]}, ${rgb_color[1]}, ${rgb_color[2]}, ${\r\n                darkMode ? '1' : '.2'\r\n              })`,\r\n            ],\r\n          });\r\n\r\n          const HALF_ICON_WIDTH = width_icon/2\r\n          const TEXT_ICON_WIDTH = width_text+HALF_ICON_WIDTH\r\n\r\n          const translateXIcon = focusAnimation.interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [0, -(TEXT_ICON_WIDTH)/2],\r\n          });\r\n          const translateXText = focusAnimation.interpolate({\r\n            inputRange: [0, 1],\r\n            outputRange: [0, (HALF_ICON_WIDTH)+5],\r\n          });\r\n          const opacityText = focusAnimation.interpolate({\r\n            inputRange: [0.3, 1],\r\n            outputRange: [0, 1],\r\n          });\r\n\r\n          return (\r\n            <Animated.View\r\n              key={index}\r\n              style={[\r\n                ColorfulStyle.item,\r\n                {\r\n                  flex: flexItem,\r\n                },\r\n              ]}\r\n            >\r\n              <TouchableOpacity\r\n                accessibilityRole=\"button\"\r\n                accessibilityState={isFocused ? { selected: true } : {}}\r\n                accessibilityLabel={options.tabBarAccessibilityLabel}\r\n                testID={options.tabBarTestID}\r\n                onPress={onPress}\r\n                onLongPress={onLongPress}\r\n                style={ColorfulStyle.touchableItem}\r\n              >\r\n                <Animated.View\r\n                  style={[\r\n                    ColorfulStyle.filterColor,\r\n                    {\r\n                      backgroundColor: filterColor,\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Animated.View style={{\r\n                      position: 'absolute',\r\n                      transform: [\r\n                        {translateX: translateXIcon}\r\n                      ]\r\n                  }}\r\n                  onLayout={(e: LayoutChangeEvent) => {\r\n                    const {width} = e.nativeEvent.layout\r\n                    setWidthIcon(width)\r\n                  }}>\r\n                    {renderIcon(isFocused)}\r\n                  </Animated.View>\r\n\r\n                  <Animated.View\r\n                    style={{\r\n                      position: 'absolute',\r\n                      opacity: opacityText,\r\n                      transform: [\r\n                        {translateX: translateXText}\r\n                      ],\r\n                    }}\r\n                    onLayout={(e: LayoutChangeEvent) => {\r\n                      const {width} = e.nativeEvent.layout\r\n                      setWidthText(width)\r\n                    }}\r\n                  >\r\n                    <Text\r\n                      numberOfLines={1}\r\n                      style={[\r\n                        ColorfulStyle.itemText,\r\n                        {\r\n                          color: darkMode ? FOREGROUND_COLOR : color,\r\n                        },\r\n                        labelStyle,\r\n                      ]}\r\n                    >\r\n                      {label}\r\n                    </Text>\r\n                  </Animated.View>\r\n                </Animated.View>\r\n              </TouchableOpacity>\r\n            </Animated.View>\r\n          );\r\n        })}\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default ColorfulTabBar;\r\n"]}